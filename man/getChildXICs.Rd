% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/merge_runs.R
\name{getChildXICs}
\alias{getChildXICs}
\title{Develop child XICs for precursors}
\usage{
getChildXICs(
  runA,
  runB,
  fileInfo,
  features,
  mzPntrs,
  precursors,
  prec2chromIndex,
  refRun,
  peptideScores,
  params,
  applyFun = lapply
)
}
\arguments{
\item{runA}{(string) name of a run to be merged with runB. Must be in the rownames of fileInfo.}

\item{runB}{(string) name of a run to be merged with runA. Must be in the rownames of fileInfo.}

\item{fileInfo}{(data-frame) output of \code{\link{getRunNames}}.}

\item{features}{(list of data-frames) contains features and their properties identified in each run.}

\item{mzPntrs}{(list) a list of mzRpwiz.}

\item{precursors}{(data-frame) atleast two columns transition_group_id and transition_ids are required.}

\item{prec2chromIndex}{(list) a list of dataframes having following columns: \cr
transition_group_id: it is PRECURSOR.ID from osw file. \cr
chromatogramIndex: index of chromatogram in mzML file.}

\item{refRun}{(integer) must be of the same length as of precursors. 1: reference is runA, 2: reference is runB.}

\item{peptideScores}{(list of data-frames) each dataframe has scores of a peptide across all runs.}

\item{params}{(list) parameters are entered as list. Output of the \code{\link{paramsDIAlignR}} function.}

\item{applyFun}{(function) value must be either lapply or BiocParallel::bplapply.}
}
\value{
(list) has three elements. The first element has child XICs for all the precursors.
The second element has corresponding aligned time vectors. Third element contains Residual Standard
Errors (RSE) of global fits amongst runA and runB.
}
\description{
This function performs the chromatogram alignment of all precursors across runA and runB. Aligned
chromatograms are merged into a child chromatogram. Aligned time vector and resulting child time
vector for each precursor is also returned.
}
\examples{
dataPath <- system.file("extdata", package = "DIAlignR")
params <- paramsDIAlignR()
fileInfo <- DIAlignR::getRunNames(dataPath = dataPath)
mzPntrs <- getMZMLpointers(fileInfo)
features <- getFeatures(fileInfo, maxFdrQuery = 1.00, runType = "DIA_Proteomics")
precursors <- getPrecursors(fileInfo, oswMerged = TRUE, runType = "DIA_Proteomics",
 context = "experiment-wide", maxPeptideFdr = 0.05)
precursors <- dplyr::arrange(precursors, .data$peptide_id, .data$transition_group_id)
peptideIDs <- unique(precursors$peptide_id)
peptideScores <- getPeptideScores(fileInfo, peptideIDs, oswMerged = TRUE, params[["runType"]], params[["context"]])
peptideScores <- lapply(peptideIDs, function(pep) dplyr::filter(peptideScores, .data$peptide_id == pep))
names(peptideScores) <- as.character(peptideIDs)
prec2chromIndex <- getChromatogramIndices(fileInfo, precursors, mzPntrs)
var2 <- as.character(sapply(peptideIDs, function(p) precursors$transition_group_id[which(precursors$peptide_id == p)[1]]))
refRun <- data.frame(rep(1L, length(peptideIDs)), var2)
mergedXICs <- getChildXICs(runA = "run1", runB = "run2", fileInfo, features, mzPntrs,
  precursors, prec2chromIndex, refRun, peptideScores, params)
for(con in mzPntrs) DBI::dbDisconnect(con)
}
\seealso{
\code{\link{childXICs}, \link{getNodeRun}}
}
\author{
Shubham Gupta, \email{shubh.gupta@mail.utoronto.ca}

ORCID: 0000-0003-3500-8152

License: (c) Author (2020) + GPL-3
Date: 2020-06-06
}
