% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/merge_runs.R
\name{getNodeRun}
\alias{getNodeRun}
\title{Create a child run from two parent runs}
\usage{
getNodeRun(
  runA,
  runB,
  mergeName,
  dataPath,
  fileInfo,
  features,
  mzPntrs,
  prec2chromIndex,
  precursors,
  params,
  adaptiveRTs,
  refRuns,
  multipeptide,
  peptideScores,
  ropenms,
  applyFun = lapply
)
}
\arguments{
\item{runA}{(string) name of a run to be merged with runB. Must be in the rownames of fileInfo.}

\item{runB}{(string) name of a run to be merged with runA. Must be in the rownames of fileInfo.}

\item{mergeName}{(string) name of the node that is generated with merging of runA and runB.}

\item{dataPath}{(string) path to xics and osw directory.}

\item{fileInfo}{(data-frame) output of \code{\link{getRunNames}}.}

\item{features}{(list of data-frames) contains features and their properties identified in each run.}

\item{mzPntrs}{(list) a list of mzRpwiz.}

\item{prec2chromIndex}{(list) a list of dataframes having following columns: \cr
transition_group_id: it is PRECURSOR.ID from osw file. \cr
chromatogramIndex: index of chromatogram in mzML file.}

\item{precursors}{(data-frame) atleast two columns transition_group_id and transition_ids are required.}

\item{params}{(list) parameters are entered as list. Output of the \code{\link{paramsDIAlignR}} function.}

\item{adaptiveRTs}{(environment) an empty environment used to store data for downstream analysis.}

\item{refRuns}{(environment) an empty environment used to store data for downstream analysis.}

\item{multipeptide}{(environment) contains multiple data-frames that are collection of features
associated with analytes. This is an output of \code{\link{getMultipeptide}}.}

\item{peptideScores}{(list of data-frames) each dataframe has scores of a peptide across all runs.}

\item{ropenms}{(pyopenms module) get this python module through \code{\link{get_ropenms}}. Required only for chrom.mzML files.}

\item{applyFun}{(function) value must be either lapply or BiocParallel::bplapply.}
}
\value{
(None)
}
\description{
Get merged features and merged chromatograms from parent runs. Chromatograms are written on the disk
at dataPath/xics. For each precursor aligned parent time-vectors and corresponding child time-vector
are also calculated and written as *_av.rda at dataPath.
}
\examples{
library(data.table)
dataPath <- system.file("extdata", package = "DIAlignR")
params <- paramsDIAlignR()
fileInfo <- getRunNames(dataPath = dataPath)
mzPntrs <- list2env(getMZMLpointers(fileInfo))
precursors <- getPrecursors(fileInfo, oswMerged = TRUE, runType = params[["runType"]],
 context = "experiment-wide", maxPeptideFdr = params[["maxPeptideFdr"]])
peptideIDs <- unique(precursors$peptide_id)
peptideScores <- getPeptideScores(fileInfo, peptideIDs, oswMerged = TRUE, params[["runType"]], params[["context"]])
masters <- paste("master", 1:(nrow(fileInfo)-1), sep = "")
peptideScores <- lapply(peptideIDs, function(pep) {x <- peptideScores[.(pep)][,-c(1L)]
  x <- rbindlist(list(x, data.table("run" = masters, "score" = NA_real_, "pvalue" = NA_real_,
    "qvalue" = NA_real_)), use.names=TRUE)
  setkeyv(x, "run"); x})
names(peptideScores) <- as.character(peptideIDs)
features <- getFeatures(fileInfo, maxFdrQuery = 1.00, runType = "DIA_Proteomics")
\dontrun{
masterFeatures <- dummyFeatures(precursors, nrow(fileInfo)-1, 1L)
features <- do.call(c, list(features, masterFeatures))
multipeptide <- getMultipeptide(precursors, features, numMerge = 0L, startIdx = 1L)
prec2chromIndex <- getChromatogramIndices(fileInfo, precursors, mzPntrs)
masterChromIndex <- dummyChromIndex(precursors, nrow(fileInfo)-1, 1L)
prec2chromIndex <- do.call(c, list(prec2chromIndex, masterChromIndex))
mergeName <- "master1"
adaptiveRTs <- new.env()
refRuns <- new.env()
getNodeRun(runA = "run2", runB = "run0", mergeName = mergeName, dataPath = ".", fileInfo, features,
 mzPntrs, prec2chromIndex, precursors, params, adaptiveRTs, refRuns, multipeptide, peptideScores, ropenms = NULL)
file.remove(file.path(".", "xics", paste0(mergeName, ".chrom.sqMass")))
file.remove(list.files(".", pattern = "*_av.rds", full.names = TRUE))
}
for(run in names(mzPntrs)) DBI::dbDisconnect(mzPntrs[[run]])
}
\seealso{
\code{\link{childXICs}, \link{getChildXICs}, \link{traverseUp}}
}
\author{
Shubham Gupta, \email{shubh.gupta@mail.utoronto.ca}

ORCID: 0000-0003-3500-8152

License: (c) Author (2020) + GPL-3
Date: 2020-06-06
}
\keyword{internal}
